<?php
namespace Phossa\Query;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-12-04 at 03:21:06.
 */
class SelectQueryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SelectQuery
     */
    protected $object;
    protected $builder;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->builder = new QueryBuilder();
        $this->object = $this->builder->select();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Phossa\Query\Sql\SelectQuery::from
     */
    public function testFrom()
    {
        // simple case
        $this->object
            ->from('users')
            ->from('sales', 's');
        $this->assertEquals(
            'SELECT * FROM `users`, `sales` `s`',
            $this->object->getStatement()
        );

        // subselect
        $this->builder->select()
             ->from($this->object, 'x')
             ->field('user_id');
        $this->assertEquals(
            "SELECT `user_id` FROM (SELECT * FROM `users`, `sales` `s`) `x`",
            $this->builder->getStatement()
        );

        // order matters
        $x = $this->builder->select()->from(
            $this->builder->select()->from('user', 'x'), 'k'
        );
        $this->assertEquals(
            "SELECT * FROM (SELECT * FROM `user` `x`) `k`",
            $x->getStatement()
        );
    }

    /**
     * @covers Phossa\Query\Sql\SelectQuery::field
     */
    public function testField()
    {
        // simple case
        $this->object
            ->from('users')
            ->field('user_id');
        $this->assertEquals(
            'SELECT `user_id` FROM `users`',
            $this->object->getStatement()
        );

        // complex field
        $this->object->field()->field('CONCAT("u_", user_id)');
        $this->assertEquals(
            'SELECT CONCAT("u_", user_id) FROM `users`',
            $this->object->getStatement()
        );

        // subselect field
        $this->object->field()->field(
            $this->builder->select()->from('accounts'), 'a'
        );
        $this->assertEquals(
            'SELECT (SELECT * FROM `accounts`) AS `a` FROM `users`',
            $this->object->getStatement()
        );
    }

    /**
     * @covers Phossa\Query\Sql\SelectQuery::distinct
     */
    public function testDistinct()
    {
        // simple case
        $this->object->from('users')->distinct()->field('user_id');
        $this->assertEquals(
            'SELECT DISTINCT `user_id` FROM `users`',
            $this->object->getStatement()
        );
    }

    /**
     * @covers Phossa\Query\Sql\SelectQuery::into
     * @todo   Implement testInto().
     */
    public function testInto()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Phossa\Query\Sql\SelectQuery::union
     * @todo   Implement testUnion().
     */
    public function testUnion()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Phossa\Query\Sql\SelectQuery::unionAll
     * @todo   Implement testUnionAll().
     */
    public function testUnionAll()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
